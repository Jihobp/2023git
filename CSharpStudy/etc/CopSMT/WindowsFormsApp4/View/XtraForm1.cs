using DevExpress.XtraEditors;
using DevExpress.XtraEditors.Controls;
using DevExpress.XtraEditors.Repository;
using DevExpress.XtraGrid;
using DevExpress.XtraGrid.Views.Grid;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using WindowsFormsApp4.Model;

namespace WindowsFormsApp4
{   //Frm_BS_Mold.cs, + cls_Grid 참조(control)  Model& view
    //(Model_BS_Customer) 
    public partial class XtraForm1 : DevExpress.XtraEditors.XtraForm
    {
        private const PictureStoreMode byteArray = PictureStoreMode.ByteArray;
        cls_Grid grid = new cls_Grid();         //cls_Grid라는 클래스에 grid 변수 생성, 새로운 인스턴스 생성! 그리드=하나의 디자인영역 제어 또는 그리드 관련 기능을 나타내는 cls_Grid 유형의 가변 그리드입니다.
        private string[] ProcessDiv = { "10" };     //공정구분 리스트 (10: 자사공정) ; 비공개 배열 변수, string 10이 들어감.
        private string[] ItemDiv = { "20", "30" };  //품목구분 리스트 (20: 제품, 30: 반제품)
        cls_Repository rpo = new cls_Repository(); //데이터 저장 및 검색 작업을 처리하는 클래스로 보이는 cls_Repository 타입의 변수 rpo.

        /*
cls_Grid grid = new cls_Grid();: This line declares a variable named grid of "type cls_Grid" and initializes it with "a new instance of the cls_Grid class".
이 줄은 cls_Grid 타입의 grid라는 변수를 선언하고 cls_Grid 클래스의 새 인스턴스로 초기화 
This suggests that cls_Grid is a class representing a grid control or grid-related functionality.
*/


        public XtraForm1() //폼 생성자 constructor
        {
            InitializeComponent(); //컴포넌트 초기화
            SetupDesign();         //디자인 함수 생성
        }
        /* 생성자
        이 생성자는 !!! Visual Studio 디자이너가 만든 컴포넌트 및 디자인 요소를 설정하는 InitializeComponent 메서드를 호출하여 양식(XtraForm1)을 초기화-> 
       그런 다음, 양식에 대한 추가 사용자 지정 디자인 요소 및 설정을 처리하는 SetupDesign 메서드를 호출

        0.summary ->  The code you provided is a constructor for the XtraForm1 class, 
        which is a public class that likely inherits from the DevExpress.XtraEditors.XtraForm. 
        Constructors are special methods in a class that are called when an instance of the class is created (i.e., when you create an object from the class).
        1.public XtraForm1(): This line defines the constructor method named XtraForm1. 
        The public keyword means that the constructor is accessible from outside the class, 
        so it can be used to create objects of this class in other parts of the code.
        1-1.indicating , 표시 {: The opening curly brace marks the beginning of the constructor's implementation, 
        2. InitializeComponent();: This line calls the InitializeComponent method. This method is automatically generated by the Visual Studio designer and contains the code responsible for initializing the components of the form. 
            It sets up various properties, event handlers, and other design-related aspects of the form.
        3. SetupDesign();: This line calls the SetupDesign method, which is a custom function for creating the design of the form. 사용자 지정함수 호출.
        The function is likely implemented somewhere in the same class or a related class to set up additional design elements 
        beyond what's handled by InitializeComponent.구현댔당, implemented! 이 함수는 동일한 클래스 또는 관련 클래스 어딘가에서 구현되어 처리되는 것 외에 추가 디자인 요소를 설정할 수 있습니다. 
        추가 디자인 요소를 설정하기 위해 구현되었을 가능성이 높습니다.

        */


        //Create Design Item
        private void SetupDesign()
        {
            //throw new NotImplementedException();

            //GridView 데이터 입력
            SetupGridView();
            //이미지
            pictureEdit1.Properties.ExportMode = ExportMode.Value;
            pictureEdit1.Properties.PictureStoreMode = PictureStoreMode.ByteArray;
            pictureEdit2.Properties.ExportMode = ExportMode.Value;
            pictureEdit2.Properties.PictureStoreMode = PictureStoreMode.ByteArray;

            //폼 닫을 때, 검사 작성된 내역 있는지 검사
            this.FormClosing += new FormClosingEventHandler((Sender, e) =>
            { //람다식
                e.Cancel = false;
                if (grid.Check_Gv_FormClosing(Gc_Mold, "Status"))
                {
                    e.Cancel = true;
                }
            });
        }
        /*In summary, the SetupDesign() method sets up some design-related configurations for the form, - 디자인 관련된 구성
         * including GridView data setup, picture properties configuration, and handling the form's 이미지 속성 구성
         * FormClosing event to check if there are any unsaved data in the GridView before allowing the form to close. FormClosing 이벤트를 발생시켜 양식을 닫기 전에 그리드뷰에 저장되지 않은 데이터가 있는지 확인합니다.
            throw new NotImplementedException();: This line throws a NotImplementedException. This exception is often used as a placeholder when you want to indicate that a method has not been implemented yet. 
            In this case, it serves as a reminder to the developer that this method is intended to be implemented later.
            이 예외는 메서드가 아직 구현되지 않았음을 나타내고자 할 때 자리 표시자로 자주 사용. 이 경우 개발자에게 이 메서드가 나중에 구현될 예정임을 알려주는 역할.
            SetupGridView();: This line calls a method named SetupGridView(). It's not shown in the provided code snippet, but it's likely that the method is defined elsewhere in the same class or a related class. It's responsible for setting up the configuration and data source for a GridView. 
            A GridView is typically a data grid or table-like control that displays data in rows and columns.  그리드뷰는 일반적으로 데이터를 행과 열로 표시하는 데이터 그리드 또는 표와 같은 컨트롤

            pictureEdit1.Properties.ExportMode = ExportMode.Value;: This line sets the ExportMode property of a pictureEdit1 control. 
            The pictureEdit1 is likely a control provided by DevExpress, and the ExportMode property determines how the picture is exported when saving or copying it. 
            ExportMode.Value suggests that the picture is exported as its actual value, likely represented as a byte array.
            

            pictureEdit1.Properties.PictureStoreMode = PictureStoreMode.ByteArray;: This line sets the PictureStoreMode property of the pictureEdit1 control. 
            The PictureStoreMode property defines how the picture is stored internally in the control. 
            PictureStoreMode.ByteArray indicates that the picture is stored as a byte array.

            pictureEdit2.Properties.ExportMode = ExportMode.Value;: Similar to item 3, this line sets the ExportMode property of pictureEdit2.
            pictureEdit2.Properties.PictureStoreMode = PictureStoreMode.ByteArray;: Similar to item 4, this line sets the PictureStoreMode property of pictureEdit2.

            this.FormClosing += new FormClosingEventHandler(...);: This line adds an event handler to the FormClosing event of the current form. 
            The event handler is defined using a lambda expression, which is an inline function. It is executed when the form is about to close.
            이벤트 핸들러는 인라인 함수인 람다 표현식을 사용하여 정의됩니다. 양식이 닫히려고 할때 실행.

            e.Cancel = false;: This line sets the Cancel property of the FormClosingEventArgs object (e) to false. 
            By default, this means the form closing action is not canceled.

            if (grid.Check_Gv_FormClosing(Gv_Mold, "Status")) { e.Cancel = true; }: This code checks if a method named Check_Gv_FormClosing 
            returns true for the provided arguments Gv_Mold and "Status". 이 코드는 Check_Gv_FormClosing이라는 메서드가 제공된 인자 Gv_Mold와 "Status"에 대해 참을 반환하는지 확인 
            It appears that grid is an instance of some class (possibly cls_Grid) with a method called Check_Gv_FormClosing. 
            If this method returns true, it means that there is some unsaved data or uncompleted operation in the Gv_Mold GridView, 
            and the form closing action should be canceled (e.Cancel = true;). This prevents the form from closing until the user resolves the unsaved data or operations.
                     */



        #region GridVView Setting
        //GridView Setting
        private void SetupGridView()
        {
            //throw new NotImplementedException();
            SetupGrid_Mold(Gv_Mold);
            SetupGrid_MoldItem(Gv_MoldItem);
        }

        private void SetupGrid_MoldItem(GridView gv_MoldItem)
        {
            throw new NotImplementedException();
        }

        private void SetupGrid_Mold(GridView gv)
        {
            //throw new NotImplementedException();
            //GvMachine Column 생성 및 세팅
            //Grid 공통 설정
            gv.Appearance.HeaderPanel.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Center;   //Header 정렬
            gv.OptionsView.ColumnAutoWidth = false;     //Column 많으면 스크롤 생기도록 바꾸기
            gv.IndicatorWidth = 50;                     //순번 너비
            //검색창
            gv.OptionsFind.AlwaysVisible = true;
            gv.OptionsView.ShowGroupPanel = false;

            //Column 생성
            grid.Create_GvColumn(gv, "상태", "Status");
            grid.Create_GvColumn(gv, "금형코드", "Mold_Cd");
            grid.Create_GvColumn(gv, "금형관리번호", "Mold_Mgmt_No");
            grid.Create_GvColumn(gv, "적용TON", "Apply_Equip");
            grid.Create_GvColumn(gv, "금형규격", "Mold_Std");
            grid.Create_GvColumn(gv, "금형형식", "Mold_Form");
            grid.Create_GvColumn(gv, "금형품목수", "Mold_Item_Count");
            grid.Create_GvColumn(gv, "CAVITY수", "Mold_Cavity");
            grid.Create_GvColumn(gv, "성형재질", "Figuration_Grade");
            grid.Create_GvColumn(gv, "지급처코드", "Supply_Cust_Cd");
            grid.Create_GvColumn(gv, "지급처명", "Supply_Cust_Nm");
            grid.Create_GvColumn(gv, "제작처코드", "Prodt_Cust_Cd");
            grid.Create_GvColumn(gv, "제작처명", "Prodt_Cust_Nm");
            grid.Create_GvColumn(gv, "제작일", "Prodt_Date");
            grid.Create_GvColumn(gv, "제작가", "Prodt_Amount");
            grid.Create_GvColumn(gv, "GATE방식", "Gate_Method");
            grid.Create_GvColumn(gv, "수축율", "Contract_Rate");
            grid.Create_GvColumn(gv, "성형품중량", "Weight");
            grid.Create_GvColumn(gv, "SPRUE", "Sprue");
            grid.Create_GvColumn(gv, "초기Shot", "Init_Shot");
            grid.Create_GvColumn(gv, "수명Shot", "Life_Shot");
            grid.Create_GvColumn(gv, "등록자", "Ins_Emp_No");
            grid.Create_GvColumn(gv, "등록일시", "Ins_Date_Time");
            grid.Create_GvColumn(gv, "수정자", "Upd_Emp_No");
            grid.Create_GvColumn(gv, "수정일시", "Upd_Date_Time");

            //Column 단일 설정
            //Repository 설정
            //D:\SMES\SMES\SMT_MES\Model\Basic
            BS_Customer cust = new BS_Customer();
            RepositoryItemSearchLookUpEdit rpo_SupplyCust = rpo.Create_RepositoryItemSearchLookUp(cust.Select_Cust_List(new string[] { }), "코드", "명칭");
            RepositoryItemSearchLookUpEdit rpo_ProdCust = rpo.Create_RepositoryItemSearchLookUp(cust.Select_Cust_List(new string[] { }), "코드", "명칭");

            gv.Columns["Mold_Cd"].ColumnEdit = rpo.Create_rpoTxt_Length(10); //금형코드
            gv.Columns["Mold_Mgmt_No"].ColumnEdit = rpo.Create_rpoTxt_Length(30); //금형명
            gv.Columns["Apply_Equip"].ColumnEdit = rpo.Create_rpoTxt_Length(50);
            gv.Columns["Mold_Std"].ColumnEdit = rpo.Create_rpoTxt_Length(50);
            gv.Columns["Mold_Form"].ColumnEdit = rpo.Create_rpoTxt_Length(50);
            gv.Columns["Mold_Item_Count"].ColumnEdit = rpo.Create_rpoTxt_Numeric();
            gv.Columns["Mold_Cavity"].ColumnEdit = rpo.Create_rpoTxt_Numeric();
            gv.Columns["Figuration_Grade"].ColumnEdit = rpo.Create_rpoTxt_Length(30);
            gv.Columns["Supply_Cust_Nm"].ColumnEdit = rpo_SupplyCust;
            gv.Columns["Prodt_Cust_Nm"].ColumnEdit = rpo_ProdCust;
            gv.Columns["Prodt_Date"].ColumnEdit = rpo.Create_rpoDate();
            gv.Columns["Prodt_Amount"].ColumnEdit = rpo.Create_rpoTxt_Numeric();
            gv.Columns["Gate_Method"].ColumnEdit = rpo.Create_rpoTxt_Length(30);
            gv.Columns["Contract_Rate"].ColumnEdit = rpo.Create_rpoTxt_Numeric();
            gv.Columns["Weight"].ColumnEdit = rpo.Create_rpoTxt_Numeric();
            gv.Columns["Sprue"].ColumnEdit = rpo.Create_rpoTxt_Numeric();
            gv.Columns["Init_Shot"].ColumnEdit = rpo.Create_rpoTxt_Numeric();
            gv.Columns["Life_Shot"].ColumnEdit = rpo.Create_rpoTxt_Numeric();


            //셀값 변경 허용 - > cls_Grid
            grid.Column_AllowEdit(gv.Columns["Mold_Cd"], false);
            grid.Column_AllowEdit(gv.Columns["Mold_Mgmt_No"]);
            grid.Column_AllowEdit(gv.Columns["Supply_Cust_Nm"]);
            grid.Column_AllowEdit(gv.Columns["Prodt_Cust_Nm"]);
            grid.Column_AllowEdit(gv.Columns["Apply_Equip"]);
            grid.Column_AllowEdit(gv.Columns["Mold_Std"]);
            grid.Column_AllowEdit(gv.Columns["Mold_Form"]);
            grid.Column_AllowEdit(gv.Columns["Mold_Item_Count"]);
            grid.Column_AllowEdit(gv.Columns["Mold_Cavity"]);
            grid.Column_AllowEdit(gv.Columns["Figuration_Grade"]);
            //grid.Column_AllowEdit(gv.Columns["Supply_Cust_Nm"]);
            //grid.Column_AllowEdit(gv.Columns["Prodt_Cust_Nm"]);
            grid.Column_AllowEdit(gv.Columns["Prodt_Date"]);
            grid.Column_AllowEdit(gv.Columns["Prodt_Amount"]);
            grid.Column_AllowEdit(gv.Columns["Gate_Method"]);
            grid.Column_AllowEdit(gv.Columns["Contract_Rate"]);
            grid.Column_AllowEdit(gv.Columns["Weight"]);
            grid.Column_AllowEdit(gv.Columns["Sprue"]);
            grid.Column_AllowEdit(gv.Columns["Init_Shot"]);
            grid.Column_AllowEdit(gv.Columns["Life_Shot"]);

            //셀값 정렬 - > cls_Grid
            gv.Columns["Status"].AppearanceCell.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Center;     //상태
            grid.SetCol_Type(gv.Columns["Mold_Item_Count"], cls_Grid.TypeList.TInt);
            grid.SetCol_Type(gv.Columns["Mold_Cavity"], cls_Grid.TypeList.TInt);
            grid.SetCol_Type(gv.Columns["Prodt_Date"], cls_Grid.TypeList.TDate);
            grid.SetCol_Type(gv.Columns["Prodt_Amount"], cls_Grid.TypeList.TFloat);
            grid.SetCol_Type(gv.Columns["Weight"], cls_Grid.TypeList.TFloat);
            grid.SetCol_Type(gv.Columns["Sprue"], cls_Grid.TypeList.TFloat);
            grid.SetCol_Type(gv.Columns["Contract_Rate"], cls_Grid.TypeList.TFloat);
            grid.SetCol_Type(gv.Columns["Init_Shot"], cls_Grid.TypeList.TInt);
            grid.SetCol_Type(gv.Columns["Life_Shot"], cls_Grid.TypeList.TInt);

            gv.Columns["Mold_Cd"].Visible = false;

            //이벤트 설정 -> cls_grid
            grid.RowNumber_Indicator(gv);    //행번호 표기
            gv.RowStyle += grid.RowStyle_ChangeBg_ByStatus;           //삭제시 배경색 지정
            gv.CellValueChanged += Event_CellValueChanged;            //셀값 수정시 상태값 수정
            gv.GridControl.ProcessGridKey += Event_ProcessGridKey;    //행추가, 삽입, 삭제 단축키기능 부여
            gv.ValidatingEditor += Event_ValidatingEditor;            //코드 입력시 중복 확인
            //grid.SetInfo_ByObject(gv);
            gv.FocusedRowObjectChanged += Gv_FocusedRowObjectChanged;   //Row 변경시 하위항목 조회
        }

        //이벤트 유효성 검사 편집기 
        private void Event_ValidatingEditor(object sender, BaseContainerValidateEditorEventArgs e)
        {
            throw new NotImplementedException();
        }

        private void Event_ProcessGridKey(object sender, KeyEventArgs e)
        {
            throw new NotImplementedException();
        }

        private void Gv_FocusedRowObjectChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowObjectChangedEventArgs e)
        {
            GridView gv = sender as GridView;
            DataRow dr = gv.GetDataRow(e.RowHandle);
            string mold_Cd = Convert.ToString(dr["Mold_Cd"]);

            //금형품목 조회
            Func_Search_Item(mold_Cd);
            //금형 이미지 조회
            Fun_Search_Image(mold_Cd);

        }

        private void Fun_Search_Image(string mold_Cd)
        {
            //throw new NotImplementedException();

            //금형이미지 조회
            BS_Mold mold = new BS_Mold();
            DataRow drMold = mold.Select_MoldInfo(mold_Cd);
        }

        private void Func_Search_Item(string mold_Cd)
        {
            throw new NotImplementedException();
        }

        private void Event_CellValueChanged(object sender, DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs e)
        {   //이벤트_ 셀값 변경!!!!!!@!!!@!@!!@!!@!@!@@!@!@@!@!@!!@
            GridView gv = sender as GridView;

            //셀 값 수정 시 상태값 수정
            if (e.Column.FieldName == gv.Columns[0].FieldName) return;
            grid.Change_Status(gv, e.RowHandle);

        }

        #endregion
    }

}